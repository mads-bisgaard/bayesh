#!/usr/bin/env bash

[ -z "$TMUX" ] && { echo "Error: fzf-tmux-server must be run inside a tmux session." >&2; exit 1; }
if ! command -v jq > /dev/null; then echo "Error: fzf-tmux-server requires jq." >&2; exit 1; fi
if ! command -v curl > /dev/null; then echo "Error: fzf-tmux-server requires curl." >&2; exit 1; fi
if ! command -v fzf > /dev/null; then echo "Error: fzf-tmux-server requires fzf." >&2; exit 1; fi

_exe_name=$(basename "$0")

start_help() {
    echo "Usage: $_exe_name start"
    echo "Starts fzf-tmux server and prints server config to stdout."
    echo "Capture the config and pass it to other methods in order to access the server."
}

start() {
    if [[ "$1" == "--help" ]]; then
        start_help
        return
    fi
    local fifo
    fifo=$(mktemp -u)
    mkfifo "$fifo"
    # shellcheck disable=SC2016
    script=(
        'echo "" | fzf '
        "--listen "
        '--bind='\''start:execute-silent(echo "{ \"url\" : \"http://localhost:$FZF_PORT\", \"tmux_pane_id\": \"$TMUX_PANE\" }" > '"$fifo"' & )'\''' 
        "--scheme=history "
        "--no-sort "
        "--exact "
        "--ansi "
        "--border=none "
        "--info=inline-right "
        "--layout=reverse "
        "--margin=0 "
        "--padding=0 "
        "--no-mouse "
        "--no-info "
    )

    tmux split-window -l 5 -d "${script[*]}"

    jq -c . < "$fifo"
    rm "$fifo"
}


parse_config() {
    local input=""
    
    while getopts ":c:" opt; do
        case $opt in
            c)
                input="$OPTARG"
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                return 1
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                return 1
                ;;
        esac
    done

    if [[ -z "$input" ]]; then
        echo "Error: config option (-c) is required." >&2
        return 1
    fi

    echo "$input"
}


kill_help() {
    echo "Usage: $_exe_name kill -c <server config>"
    echo "Kills the server specified by the config."
}

kill() {
    if [[ "$1" == "--help" ]]; then
        kill_help
        return
    fi
    local config
    local url
    local pane_id
    config=$(parse_config "$@") || { kill_help; exit 1; }
    url=$(echo "$config" | jq -r .url)
    pane_id=$(echo "$config" | jq -r .tmux_pane_id)
    
    if curl -XGET "$url" &> /dev/null; then
        if ! tmux kill-pane -t "$pane_id"; then
            echo "Could not kill fzf-tmux server" >&2
            exit 1
        fi
    fi
}

get_help() {
    echo "Usage: $_exe_name get -c <server config>"
    echo "Get the state of the fzf-tmux server."
}

get() {
    if [[ "$1" == "--help" ]]; then
        get_help
        return
    fi
    local config
    local url
    config=$(parse_config "$@") || { get_help; exit 1; }
    url=$(echo "$config" | jq -r .url)
    if ! curl -XGET "$url"; then
        echo "GET request failed" >&2
        exit 1
    fi
}

post_help() {
    echo "Usage: $_exe_name post -c <server config>"
    echo "Post an action to the fzf-tmux-server by piping the request body to stdin"
    # shellcheck disable=SC2016
    echo 'Example: echo "reload(find $(pwd))" | fzf-tmux-server post -c "$config"'
}

post() {
    if [[ "$1" == "--help" ]]; then
        post_help
        return
    fi
    local config
    local url
    config=$(parse_config "$@") || { post_help; exit 1; }
    url=$(echo "$config" | jq -r .url)
    if ! curl -XPOST "$url" -d "$(cat)"; then
        echo "POST request failed" >&2
        exit 1
    fi
}

case "$1" in
    start)
        shift
        start "$@"
        ;;
    kill)
        shift
        kill "$@"
        ;;
    get)
        shift
        get "$@"
        ;;
    post)
        shift
        post "$@"
        ;;
    *)
        echo "Usage: $_exe_name {start|kill|get|post} [additional args]"
        echo "Options:"
        echo "  start   Start fzf-tmux server"
        echo "  kill    Kill fzf-tmux server"
        echo "  get     Make GET request"
        echo "  post    Make POST request"
        echo "Example:"
        # shellcheck disable=SC2016
        echo '  config=$(fzf-tmux-server start)'
        # shellcheck disable=SC2016
        echo '  fzf-tmux-server get -c "$config"'
        # shellcheck disable=SC2016
        echo '  echo "reload(find $(pwd))" | fzf-tmux-server post -c "$config"'
        # shellcheck disable=SC2016
        echo '  fzf-tmux-server kill -c "$config"'
        exit 0
        ;;
esac
